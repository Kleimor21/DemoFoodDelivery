//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 13 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Green_Global`.
    static let green_Global = Rswift.ColorResource(bundle: R.hostingBundle, name: "Green_Global")
    /// Color `Green_Light`.
    static let green_Light = Rswift.ColorResource(bundle: R.hostingBundle, name: "Green_Light")
    /// Color `LightGray`.
    static let lightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "LightGray")
    /// Color `Medium_Gray`.
    static let medium_Gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "Medium_Gray")
    /// Color `Orange_Fon`.
    static let orange_Fon = Rswift.ColorResource(bundle: R.hostingBundle, name: "Orange_Fon")
    /// Color `Orange_Price`.
    static let orange_Price = Rswift.ColorResource(bundle: R.hostingBundle, name: "Orange_Price")
    /// Color `Orange_Text`.
    static let orange_Text = Rswift.ColorResource(bundle: R.hostingBundle, name: "Orange_Text")
    /// Color `Shadow_Color_notification`.
    static let shadow_Color_notification = Rswift.ColorResource(bundle: R.hostingBundle, name: "Shadow_Color_notification")
    /// Color `Shadow_Color`.
    static let shadow_Color = Rswift.ColorResource(bundle: R.hostingBundle, name: "Shadow_Color")
    /// Color `TextLighy_Gray`.
    static let textLighy_Gray = Rswift.ColorResource(bundle: R.hostingBundle, name: "TextLighy_Gray")
    /// Color `Withe_Notification`.
    static let withe_Notification = Rswift.ColorResource(bundle: R.hostingBundle, name: "Withe_Notification")
    /// Color `text_black`.
    static let text_black = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_black")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Green_Global", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_Global(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_Global, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Green_Light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func green_Light(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.green_Light, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LightGray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Medium_Gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func medium_Gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.medium_Gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Orange_Fon", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange_Fon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange_Fon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Orange_Price", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange_Price(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange_Price, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Orange_Text", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func orange_Text(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.orange_Text, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Shadow_Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadow_Color(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadow_Color, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Shadow_Color_notification", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func shadow_Color_notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.shadow_Color_notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "TextLighy_Gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func textLighy_Gray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.textLighy_Gray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Withe_Notification", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func withe_Notification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.withe_Notification, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_black", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Green_Global", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_Global(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_Global.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Green_Light", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func green_Light(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.green_Light.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "LightGray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lightGray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lightGray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Medium_Gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func medium_Gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.medium_Gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Orange_Fon", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange_Fon(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange_Fon.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Orange_Price", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange_Price(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange_Price.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Orange_Text", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func orange_Text(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.orange_Text.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Shadow_Color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadow_Color(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadow_Color.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Shadow_Color_notification", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func shadow_Color_notification(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.shadow_Color_notification.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "TextLighy_Gray", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func textLighy_Gray(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.textLighy_Gray.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Withe_Notification", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func withe_Notification(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.withe_Notification.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_black", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_black(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_black.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 30 images.
  struct image {
    /// Image `BagraundMain`.
    static let bagraundMain = Rswift.ImageResource(bundle: R.hostingBundle, name: "BagraundMain")
    /// Image `CheckMark`.
    static let checkMark = Rswift.ImageResource(bundle: R.hostingBundle, name: "CheckMark")
    /// Image `Check_List_off`.
    static let check_List_off = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check_List_off")
    /// Image `Check_List_on`.
    static let check_List_on = Rswift.ImageResource(bundle: R.hostingBundle, name: "Check_List_on")
    /// Image `Icon_Filter`.
    static let icon_Filter = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_Filter")
    /// Image `Icon_Notifiaction_Off`.
    static let icon_Notifiaction_Off = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_Notifiaction_Off")
    /// Image `Icon_Notifiaction_On`.
    static let icon_Notifiaction_On = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_Notifiaction_On")
    /// Image `Icon_Search`.
    static let icon_Search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_Search")
    /// Image `Icon_map`.
    static let icon_map = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icon_map")
    /// Image `Logo`.
    static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Logo")
    /// Image `MenuPhoto1`.
    static let menuPhoto1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "MenuPhoto1")
    /// Image `Payoneer_Logo`.
    static let payoneer_Logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Payoneer_Logo")
    /// Image `Paypal_Logo`.
    static let paypal_Logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Paypal_Logo")
    /// Image `ScrinHome`.
    static let scrinHome = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScrinHome")
    /// Image `Tab_Cart`.
    static let tab_Cart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab_Cart")
    /// Image `Tab_Chat`.
    static let tab_Chat = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab_Chat")
    /// Image `Tab_Home`.
    static let tab_Home = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab_Home")
    /// Image `Tab_Profile`.
    static let tab_Profile = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab_Profile")
    /// Image `Visa_Logo`.
    static let visa_Logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Visa_Logo")
    /// Image `background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "background")
    /// Image `icon_Back`.
    static let icon_Back = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_Back")
    /// Image `icon_email`.
    static let icon_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_email")
    /// Image `icon_eye_closed`.
    static let icon_eye_closed = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_closed")
    /// Image `icon_eye_opened`.
    static let icon_eye_opened = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_eye_opened")
    /// Image `icon_facebook`.
    static let icon_facebook = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_facebook")
    /// Image `icon_google`.
    static let icon_google = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_google")
    /// Image `icon_lock`.
    static let icon_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_lock")
    /// Image `icon_username`.
    static let icon_username = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_username")
    /// Image `logoImageOnbording1`.
    static let logoImageOnbording1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoImageOnbording1")
    /// Image `logoImageOnbording2`.
    static let logoImageOnbording2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "logoImageOnbording2")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "BagraundMain", bundle: ..., traitCollection: ...)`
    static func bagraundMain(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bagraundMain, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CheckMark", bundle: ..., traitCollection: ...)`
    static func checkMark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.checkMark, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Check_List_off", bundle: ..., traitCollection: ...)`
    static func check_List_off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_List_off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Check_List_on", bundle: ..., traitCollection: ...)`
    static func check_List_on(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.check_List_on, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_Filter", bundle: ..., traitCollection: ...)`
    static func icon_Filter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Filter, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_Notifiaction_Off", bundle: ..., traitCollection: ...)`
    static func icon_Notifiaction_Off(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Notifiaction_Off, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_Notifiaction_On", bundle: ..., traitCollection: ...)`
    static func icon_Notifiaction_On(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Notifiaction_On, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_Search", bundle: ..., traitCollection: ...)`
    static func icon_Search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Search, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Icon_map", bundle: ..., traitCollection: ...)`
    static func icon_map(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_map, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
    static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MenuPhoto1", bundle: ..., traitCollection: ...)`
    static func menuPhoto1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menuPhoto1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Payoneer_Logo", bundle: ..., traitCollection: ...)`
    static func payoneer_Logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.payoneer_Logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Paypal_Logo", bundle: ..., traitCollection: ...)`
    static func paypal_Logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paypal_Logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScrinHome", bundle: ..., traitCollection: ...)`
    static func scrinHome(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scrinHome, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tab_Cart", bundle: ..., traitCollection: ...)`
    static func tab_Cart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_Cart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tab_Chat", bundle: ..., traitCollection: ...)`
    static func tab_Chat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_Chat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tab_Home", bundle: ..., traitCollection: ...)`
    static func tab_Home(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_Home, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Tab_Profile", bundle: ..., traitCollection: ...)`
    static func tab_Profile(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab_Profile, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Visa_Logo", bundle: ..., traitCollection: ...)`
    static func visa_Logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.visa_Logo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_Back", bundle: ..., traitCollection: ...)`
    static func icon_Back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_Back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_email", bundle: ..., traitCollection: ...)`
    static func icon_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_email, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eye_closed", bundle: ..., traitCollection: ...)`
    static func icon_eye_closed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_closed, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_eye_opened", bundle: ..., traitCollection: ...)`
    static func icon_eye_opened(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_eye_opened, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_facebook", bundle: ..., traitCollection: ...)`
    static func icon_facebook(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_facebook, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_google", bundle: ..., traitCollection: ...)`
    static func icon_google(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_google, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_lock", bundle: ..., traitCollection: ...)`
    static func icon_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_lock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_username", bundle: ..., traitCollection: ...)`
    static func icon_username(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_username, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoImageOnbording1", bundle: ..., traitCollection: ...)`
    static func logoImageOnbording1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoImageOnbording1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "logoImageOnbording2", bundle: ..., traitCollection: ...)`
    static func logoImageOnbording2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoImageOnbording2, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localization` struct is generated, and contains static references to 37 localization keys.
    struct localization {
      /// en translation: $7
      ///
      /// Locales: en
      static let priceMenuPricLabel = Rswift.StringResource(key: "priceMenu.pricLabel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Anamwp . . |
      ///
      /// Locales: en
      static let signUpUserNamePlaceholder = Rswift.StringResource(key: "signUp.userName.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Cart
      ///
      /// Locales: en
      static let mainTabCartItem = Rswift.StringResource(key: "mainTab.cartItem", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Chat
      ///
      /// Locales: en
      static let mainTabChatItem = Rswift.StringResource(key: "mainTab.chatItem", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Congrats!
      ///
      /// Locales: en
      static let completionRegistrationTitle = Rswift.StringResource(key: "completionRegistration.title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create Account
      ///
      /// Locales: en
      static let signInSignInButtonSetTitle = Rswift.StringResource(key: "signIn.signInButton.setTitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Create Account
      ///
      /// Locales: en
      static let signUpSignUpButton = Rswift.StringResource(key: "signUp.signUpButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let signInEmailTFTextFieldPlaceholder = Rswift.StringResource(key: "signIn.emailTF.textField.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email
      ///
      /// Locales: en
      static let signUpEmailTFPlaceholder = Rswift.StringResource(key: "signUp.emailTF.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Email Me About Special Pricing
      ///
      /// Locales: en
      static let signUpEmailMeCheckBox = Rswift.StringResource(key: "signUp.emailMeCheckBox", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enjoy a fast and smooth food delivery at your doorstep
      ///
      /// Locales: en
      static let onboardingSecondSubtitle = Rswift.StringResource(key: "onboardingSecond.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Enter password ... 
      ///
      /// Locales: en
      static let signUpPasswordTFPlaceholder = Rswift.StringResource(key: "signUp.passwordTF.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Facebook
      ///
      /// Locales: en
      static let signInLoginViaFacebookButton = Rswift.StringResource(key: "signIn.loginViaFacebookButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Find Your Favorite Food
      ///
      /// Locales: en
      static let homeTitle = Rswift.StringResource(key: "home.title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Find your  Comfort Food here
      ///
      /// Locales: en
      static let onboardingFirstTitle = Rswift.StringResource(key: "onboardingFirst.title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Food Ninja is Where Your Comfort Food Lives
      ///
      /// Locales: en
      static let onboardingSecondTitle = Rswift.StringResource(key: "onboardingSecond.title", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Forgot Your Password?
      ///
      /// Locales: en
      static let signInForgotPasswordButtonSetTitle = Rswift.StringResource(key: "signIn.forgotPasswordButton.setTitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Google
      ///
      /// Locales: en
      static let signInLoginViaGoogleButton = Rswift.StringResource(key: "signIn.loginViaGoogleButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Herbal Pancake
      ///
      /// Locales: en
      static let priceMenuDishNameLabel = Rswift.StringResource(key: "priceMenu.dishNameLabel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Here You Can find a chef or dish for every taste and color. Enjoy!
      ///
      /// Locales: en
      static let onboardingFirstSubtitle = Rswift.StringResource(key: "onboardingFirst.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Home
      ///
      /// Locales: en
      static let mainTabHomeItem = Rswift.StringResource(key: "mainTab.homeItem", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Keep Me Signed In
      ///
      /// Locales: en
      static let signUpKeepMeCheckBox = Rswift.StringResource(key: "signUp.keepMeCheckBox", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Login To Your Account
      ///
      /// Locales: en
      static let signInLoginLabel = Rswift.StringResource(key: "signIn.loginLabel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Logout
      ///
      /// Locales: en
      static let homeViewLogoutButton = Rswift.StringResource(key: "homeView.logoutButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let onboardingFirstNextButton = Rswift.StringResource(key: "onboardingFirst.nextButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Next
      ///
      /// Locales: en
      static let onboardingSecondNextButton = Rswift.StringResource(key: "onboardingSecond.nextButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Or Continue With
      ///
      /// Locales: en
      static let signInLoginMethodLabel = Rswift.StringResource(key: "signIn.loginMethodLabel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Password
      ///
      /// Locales: en
      static let signInPasswordTFTextFieldPlaceholder = Rswift.StringResource(key: "signIn.passwordTF.textField.placeholder", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Popular Menu
      ///
      /// Locales: en
      static let homeViewPopularMenu = Rswift.StringResource(key: "homeView.popularMenu", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Profile
      ///
      /// Locales: en
      static let mainTabProfileItem = Rswift.StringResource(key: "mainTab.profileItem", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign UP
      ///
      /// Locales: en
      static let signInSignUpButtonSetTitle = Rswift.StringResource(key: "signIn.signUpButton.setTitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sign Up For Free 
      ///
      /// Locales: en
      static let signUpLoginLabel = Rswift.StringResource(key: "signUp.loginLabel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Try Order
      ///
      /// Locales: en
      static let completionRegistrationTryOrderButton = Rswift.StringResource(key: "completionRegistration.tryOrderButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Warung Herbal
      ///
      /// Locales: en
      static let priceMenuWarungHerbalLabel = Rswift.StringResource(key: "priceMenu.warungHerbalLabel", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: What do you want to order?
      ///
      /// Locales: en
      static let searchInputTextField = Rswift.StringResource(key: "searchInput.textField", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Your Profile Is Ready To Use
      ///
      /// Locales: en
      static let completionRegistrationSubtitle = Rswift.StringResource(key: "completionRegistration.subtitle", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: already have an account?
      ///
      /// Locales: en
      static let signUpHaveAnAccountButton = Rswift.StringResource(key: "signUp.haveAnAccountButton", tableName: "Localization", bundle: R.hostingBundle, locales: ["en"], comment: nil)

      /// en translation: $7
      ///
      /// Locales: en
      static func priceMenuPricLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceMenu.pricLabel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "priceMenu.pricLabel"
        }

        return NSLocalizedString("priceMenu.pricLabel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Anamwp . . |
      ///
      /// Locales: en
      static func signUpUserNamePlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.userName.placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.userName.placeholder"
        }

        return NSLocalizedString("signUp.userName.placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Cart
      ///
      /// Locales: en
      static func mainTabCartItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainTab.cartItem", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mainTab.cartItem"
        }

        return NSLocalizedString("mainTab.cartItem", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Chat
      ///
      /// Locales: en
      static func mainTabChatItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainTab.chatItem", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mainTab.chatItem"
        }

        return NSLocalizedString("mainTab.chatItem", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Congrats!
      ///
      /// Locales: en
      static func completionRegistrationTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("completionRegistration.title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "completionRegistration.title"
        }

        return NSLocalizedString("completionRegistration.title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Create Account
      ///
      /// Locales: en
      static func signInSignInButtonSetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.signInButton.setTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.signInButton.setTitle"
        }

        return NSLocalizedString("signIn.signInButton.setTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Create Account
      ///
      /// Locales: en
      static func signUpSignUpButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.signUpButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.signUpButton"
        }

        return NSLocalizedString("signUp.signUpButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func signInEmailTFTextFieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.emailTF.textField.placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.emailTF.textField.placeholder"
        }

        return NSLocalizedString("signIn.emailTF.textField.placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Email
      ///
      /// Locales: en
      static func signUpEmailTFPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.emailTF.placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.emailTF.placeholder"
        }

        return NSLocalizedString("signUp.emailTF.placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Email Me About Special Pricing
      ///
      /// Locales: en
      static func signUpEmailMeCheckBox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.emailMeCheckBox", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.emailMeCheckBox"
        }

        return NSLocalizedString("signUp.emailMeCheckBox", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enjoy a fast and smooth food delivery at your doorstep
      ///
      /// Locales: en
      static func onboardingSecondSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboardingSecond.subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "onboardingSecond.subtitle"
        }

        return NSLocalizedString("onboardingSecond.subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Enter password ... 
      ///
      /// Locales: en
      static func signUpPasswordTFPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.passwordTF.placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.passwordTF.placeholder"
        }

        return NSLocalizedString("signUp.passwordTF.placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Facebook
      ///
      /// Locales: en
      static func signInLoginViaFacebookButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.loginViaFacebookButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.loginViaFacebookButton"
        }

        return NSLocalizedString("signIn.loginViaFacebookButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Find Your Favorite Food
      ///
      /// Locales: en
      static func homeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "home.title"
        }

        return NSLocalizedString("home.title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Find your  Comfort Food here
      ///
      /// Locales: en
      static func onboardingFirstTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboardingFirst.title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "onboardingFirst.title"
        }

        return NSLocalizedString("onboardingFirst.title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Food Ninja is Where Your Comfort Food Lives
      ///
      /// Locales: en
      static func onboardingSecondTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboardingSecond.title", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "onboardingSecond.title"
        }

        return NSLocalizedString("onboardingSecond.title", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Forgot Your Password?
      ///
      /// Locales: en
      static func signInForgotPasswordButtonSetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.forgotPasswordButton.setTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.forgotPasswordButton.setTitle"
        }

        return NSLocalizedString("signIn.forgotPasswordButton.setTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Google
      ///
      /// Locales: en
      static func signInLoginViaGoogleButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.loginViaGoogleButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.loginViaGoogleButton"
        }

        return NSLocalizedString("signIn.loginViaGoogleButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Herbal Pancake
      ///
      /// Locales: en
      static func priceMenuDishNameLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceMenu.dishNameLabel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "priceMenu.dishNameLabel"
        }

        return NSLocalizedString("priceMenu.dishNameLabel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Here You Can find a chef or dish for every taste and color. Enjoy!
      ///
      /// Locales: en
      static func onboardingFirstSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboardingFirst.subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "onboardingFirst.subtitle"
        }

        return NSLocalizedString("onboardingFirst.subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Home
      ///
      /// Locales: en
      static func mainTabHomeItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainTab.homeItem", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mainTab.homeItem"
        }

        return NSLocalizedString("mainTab.homeItem", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Keep Me Signed In
      ///
      /// Locales: en
      static func signUpKeepMeCheckBox(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.keepMeCheckBox", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.keepMeCheckBox"
        }

        return NSLocalizedString("signUp.keepMeCheckBox", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Login To Your Account
      ///
      /// Locales: en
      static func signInLoginLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.loginLabel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.loginLabel"
        }

        return NSLocalizedString("signIn.loginLabel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Logout
      ///
      /// Locales: en
      static func homeViewLogoutButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeView.logoutButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "homeView.logoutButton"
        }

        return NSLocalizedString("homeView.logoutButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func onboardingFirstNextButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboardingFirst.nextButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "onboardingFirst.nextButton"
        }

        return NSLocalizedString("onboardingFirst.nextButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Next
      ///
      /// Locales: en
      static func onboardingSecondNextButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("onboardingSecond.nextButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "onboardingSecond.nextButton"
        }

        return NSLocalizedString("onboardingSecond.nextButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Or Continue With
      ///
      /// Locales: en
      static func signInLoginMethodLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.loginMethodLabel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.loginMethodLabel"
        }

        return NSLocalizedString("signIn.loginMethodLabel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Password
      ///
      /// Locales: en
      static func signInPasswordTFTextFieldPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.passwordTF.textField.placeholder", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.passwordTF.textField.placeholder"
        }

        return NSLocalizedString("signIn.passwordTF.textField.placeholder", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Popular Menu
      ///
      /// Locales: en
      static func homeViewPopularMenu(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("homeView.popularMenu", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "homeView.popularMenu"
        }

        return NSLocalizedString("homeView.popularMenu", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Profile
      ///
      /// Locales: en
      static func mainTabProfileItem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mainTab.profileItem", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "mainTab.profileItem"
        }

        return NSLocalizedString("mainTab.profileItem", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sign UP
      ///
      /// Locales: en
      static func signInSignUpButtonSetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signIn.signUpButton.setTitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signIn.signUpButton.setTitle"
        }

        return NSLocalizedString("signIn.signUpButton.setTitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Sign Up For Free 
      ///
      /// Locales: en
      static func signUpLoginLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.loginLabel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.loginLabel"
        }

        return NSLocalizedString("signUp.loginLabel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Try Order
      ///
      /// Locales: en
      static func completionRegistrationTryOrderButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("completionRegistration.tryOrderButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "completionRegistration.tryOrderButton"
        }

        return NSLocalizedString("completionRegistration.tryOrderButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Warung Herbal
      ///
      /// Locales: en
      static func priceMenuWarungHerbalLabel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("priceMenu.warungHerbalLabel", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "priceMenu.warungHerbalLabel"
        }

        return NSLocalizedString("priceMenu.warungHerbalLabel", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: What do you want to order?
      ///
      /// Locales: en
      static func searchInputTextField(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("searchInput.textField", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "searchInput.textField"
        }

        return NSLocalizedString("searchInput.textField", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: Your Profile Is Ready To Use
      ///
      /// Locales: en
      static func completionRegistrationSubtitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("completionRegistration.subtitle", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "completionRegistration.subtitle"
        }

        return NSLocalizedString("completionRegistration.subtitle", tableName: "Localization", bundle: bundle, comment: "")
      }

      /// en translation: already have an account?
      ///
      /// Locales: en
      static func signUpHaveAnAccountButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("signUp.haveAnAccountButton", tableName: "Localization", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localization", preferredLanguages: preferredLanguages) else {
          return "signUp.haveAnAccountButton"
        }

        return NSLocalizedString("signUp.haveAnAccountButton", tableName: "Localization", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "Logo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
